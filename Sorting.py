# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Сортировка2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time
import random
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(QtWidgets.QWidget):
    arr = []

    # window = Tk()
    # window.mainloop()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.array_size_label = QtWidgets.QLabel(self.centralwidget)
        self.array_size_label.setGeometry(QtCore.QRect(10, 0, 261, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.array_size_label.setFont(font)
        self.array_size_label.setTextFormat(QtCore.Qt.AutoText)
        self.array_size_label.setObjectName("array_size_label")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(20, 257, 600, 70))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(1)
        self.size_input = QtWidgets.QLineEdit(self.centralwidget)
        int_validator = QtGui.QIntValidator(1, 999999)
        self.size_input.setValidator(int_validator)
        self.size_input.setGeometry(QtCore.QRect(20, 40, 241, 20))
        self.size_input.setObjectName("size_input")
        self.generate_button = QtWidgets.QPushButton(self.centralwidget)
        self.generate_button.setGeometry(QtCore.QRect(20, 220, 111, 23))
        self.generate_button.setObjectName("generate_button")
        self.sort_button = QtWidgets.QPushButton(self.centralwidget)
        self.sort_button.setGeometry(QtCore.QRect(140, 220, 111, 23))
        self.sort_button.setObjectName("sort_button")
        self.invert_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.invert_checkBox.setGeometry(QtCore.QRect(271, 220, 160, 23))
        self.invert_checkBox.setObjectName("invert_checkBox")
        self.real_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.real_radiobutton.setGeometry(QtCore.QRect(20, 170, 131, 17))
        self.real_radiobutton.setObjectName("real_radiobutton")
        self.integers_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.integers_radiobutton.setGeometry(QtCore.QRect(20, 150, 111, 17))
        self.integers_radiobutton.setObjectName("integers_radiobutton")
        # self.imaginary_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        # self.imaginary_radiobutton.setGeometry(QtCore.QRect(20, 190, 131, 17))
        # self.imaginary_radiobutton.setObjectName("imaginary_radiobutton")
        self.range_label = QtWidgets.QLabel(self.centralwidget)
        self.range_label.setGeometry(QtCore.QRect(20, 70, 291, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.range_label.setFont(font)
        self.range_label.setObjectName("range_label")
        self.min_input = QtWidgets.QLineEdit(self.centralwidget)
        float_validator = QtGui.QDoubleValidator(-99999.000, 99999.000, 3,
                                                 notation=QtGui.QDoubleValidator.StandardNotation)
        locale = QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates)
        float_validator.setLocale(locale)
        self.min_input.setValidator(float_validator)
        self.min_input.setGeometry(QtCore.QRect(20, 120, 60, 20))
        self.min_input.setObjectName("min_input")
        self.max_input = QtWidgets.QLineEdit(self.centralwidget)
        self.max_input.setValidator(float_validator)
        self.max_input.setGeometry(QtCore.QRect(100, 120, 60, 20))
        self.max_input.setObjectName("max_input")
        self.min_label = QtWidgets.QLabel(self.centralwidget)
        self.min_label.setGeometry(QtCore.QRect(40, 100, 47, 13))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.min_label.setFont(font)
        self.min_label.setObjectName("min_label")
        self.max_label = QtWidgets.QLabel(self.centralwidget)
        self.max_label.setGeometry(QtCore.QRect(117, 100, 47, 13))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.max_label.setFont(font)
        self.max_label.setObjectName("max_label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 509, 21))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action = QtWidgets.QAction(MainWindow)
        self.action.setObjectName("action")
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_3 = QtWidgets.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.menu.addAction(self.action)
        self.menu.addAction(self.action_2)
        self.menu.addAction(self.action_3)
        self.menubar.addAction(self.menu.menuAction())
        self.sorting_methods_label = QtWidgets.QLabel(self.centralwidget)
        self.sorting_methods_label.setGeometry(QtCore.QRect(335, 62, 200, 40))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.sorting_methods_label.setFont(font)
        self.sorting_methods_label.setTextFormat(QtCore.Qt.AutoText)
        self.sorting_methods_label.setObjectName("sorting_methods_label")
        self.sorting_methods_box = QtWidgets.QComboBox(MainWindow)
        self.sorting_methods_box.setObjectName("sorting_methods")
        self.sorting_methods_box.addItem("Вятскин Сортировка V.1")
        self.sorting_methods_box.setGeometry(QtCore.QRect(335, 138, 200, 20))
        self.timer_label = QtWidgets.QLabel(self.centralwidget)
        self.timer_label.setGeometry(QtCore.QRect(20, 370, 2000, 40))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(75)
        self.timer_label.setFont(font)
        self.timer_label.setTextFormat(QtCore.Qt.AutoText)
        self.timer_label.setObjectName("timer_label")
        self.progressbar = QtWidgets.QProgressBar(MainWindow)
        self.progressbar.setGeometry(QtCore.QRect(20, 363, 340, 30))

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # if (self.max_input.text() != '') and (self.min_input.text() != '') and (self.size_input.text() != ''):
        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Сортировка массива"))
        self.array_size_label.setText(_translate("MainWindow", "Размер массива"))
        self.generate_button.setText(_translate("MainWindow", "Сгенерировать"))
        self.sort_button.setText(_translate("MainWindow", "Отсортировать"))
        self.invert_checkBox.setText(_translate("MainWindow", "Инвертировать сортировку"))
        self.real_radiobutton.setText(_translate("MainWindow", "Вещественные числа"))
        self.integers_radiobutton.setText(_translate("MainWindow", "Целые числа"))
        # self.imaginary_radiobutton.setText(_translate("MainWindow", "Комплексные числа"))
        self.range_label.setText(_translate("MainWindow", "Диапазон значений (включительно)"))
        self.min_label.setText(_translate("MainWindow", "Min"))
        self.max_label.setText(_translate("MainWindow", "Max"))
        self.sorting_methods_label.setText(_translate("MainWindow", "Метод сортировки"))
        self.menu.setTitle(_translate("MainWindow", "Файл"))
        self.action.setText(_translate("MainWindow", "Сохранить"))
        self.action_2.setText(_translate("MainWindow", "Импортировать"))
        self.action_3.setText(_translate("MainWindow", "Закрыть"))
        self.size_input.setText("10")
        self.min_input.setText("0")
        self.max_input.setText("9")
        self.integers_radiobutton.setChecked(True)
        self.sort_button.setEnabled(False)

    def add_functions(self):
        self.size_input.textChanged[str].connect(lambda: self.generate_button.setEnabled((self.size_input.text() != "0") and
            (self.size_input.text() != "") and (self.min_input.text() != "") and (self.max_input.text() != "")))
        self.min_input.textChanged[str].connect(lambda: self.generate_button.setEnabled((self.size_input.text() != "0") and
            (self.size_input.text() != "") and (self.min_input.text() != "") and (self.max_input.text() != "")))
        self.max_input.textChanged[str].connect(lambda: self.generate_button.setEnabled((self.size_input.text() != "0") and
            (self.size_input.text() != "") and (self.min_input.text() != "") and (self.max_input.text() != "")))
        self.generate_button.clicked.connect(lambda: self.fill_tablewidget(
            self.generate_array(self.size_input.text(), self.check_number_type(), self.min_input.text(),
                                self.max_input.text()), self.tableWidget))
        self.sort_button.clicked.connect(lambda: self.fill_tablewidget(
            self.sort_array(self.arr, self.check_inversion(), str(self.sorting_methods_box.currentText())),
            self.tableWidget))
        self.action.triggered.connect(lambda: self.save_to_file(self.arr))
        self.tableWidget.itemChanged.connect(lambda: self.change_element(self.arr, self.tableWidget.currentItem()))
        self.action_2.triggered.connect(lambda: self.import_from_file())

    def check_number_type(self):
        number_type = "integer"
        if self.integers_radiobutton.isChecked():
            number_type = "integer"
        elif self.real_radiobutton.isChecked():
            number_type = "float"
        return number_type

    def check_inversion(self):
        isInverted = 0
        if self.invert_checkBox.isChecked():
            isInverted = 1
        else:
            isInverted = 0
        return isInverted

    def fill_tablewidget(self, array, table_widget):
        rowPosition = 0
        self.tableWidget.setColumnCount(len(array))
        for i in range(0, len(array)):
            table_widget.setItem(rowPosition, i, QtWidgets.QTableWidgetItem(str(array[i])))
        table_widget.resizeColumnsToContents()
        self.sort_button.setEnabled(True)

    def generate_array(self, size, number_type, minimum, maximum):
        if minimum > maximum:
            buffer = minimum
            minimum = maximum
            maximum = buffer
        array = []
        if number_type == "integer":
            for i in range(0, int(float(size))):
                array.append(random.randint(int(float(minimum)), int(float(maximum))))

        elif number_type == "float":
            for i in range(0, int(float(size))):
                array.append(random.uniform(float(minimum), float(maximum)))
        self.arr = array
        return array

        # elif type == "complex":
        #    for i in range(0, size):
        #       array.append(complex(random.uniform(min, max),random.uniform(min, max)))

    def sort_array(self, array, isInverted, sorting_method):
        if sorting_method == "Вятскин Сортировка V.1":
            start_time = time.time()
            for i in range(0, len(array)):
                length = len(array)
                self.progressbar.setValue(int(i * 100 / length))
                for j in range(i + 1, len(array)):
                    if array[i] > array[j]:
                        temp = array[i]
                        array[i] = array[j]
                        array[j] = temp
            self.progressbar.setValue(100)
            self.timer_label.setText(("Отсортировано за %s секунд" % (
                    time.time() - start_time)))  # print("--- sorted in %s seconds ---" % (time.time() - start_time))
            if isInverted == 0:
                self.arr = array
                return array
            else:
                self.arr = list(reversed(array))
                return list(reversed(array))

    def save_to_file(self, array):
        path = QtWidgets.QFileDialog.getSaveFileName(self, 'Save File', '.', '*.txt')[0]
        if path != "":
            file = open(path, "w+")
            for i in array:
                file.write(str(i) + ",")
            file.close()

    def change_element(self, array, item):
        if (item is not None) and (item.text().isnumeric() is False):
            item.setText("0")
        elif (item is not None) and (item.text() != ''):
            print(item.text())
            column_count = len(array)
            index = (column_count * item.row()) + item.column()
            value = item.text()
            if (value.isdigit()) or (value.startswith('-') and value[:1].isdigit()):
                array[index] = int(value)
            else:
                array[index] = float(value)


    def import_from_file(self):
        self.arr.clear()
        filepath = QtWidgets.QFileDialog.getOpenFileName(self, 'Open File', '.')
        if filepath[0] != "":
            file = open(filepath[0])
            for num in file.read().strip(',').split(','):
                if (num.isdigit()) or (num.startswith('-') and num[:1].isdigit()):
                    self.arr.append(int(num))
                else:
                    self.arr.append(float(num))
            file.close()
            self.fill_tablewidget(self.arr, self.tableWidget)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
